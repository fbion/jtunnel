// Generated by CoffeeScript 1.12.2
(function() {
  var Crypto, Net, Opt, argv, ciphers, host, listen, server;

  Opt = require('optimist');

  Crypto = require('crypto');

  Net = require('net');

  argv = Opt.usage('Usage: $0 [ -l 80 ] [ -h 123.123.123.123:80 ] [ -c rc4 ]').boolean('d').boolean('c').alias('l', 'listen').alias('h', 'host').alias('r', 'crypto').alias('p', 'password').alias('d', 'dump').alias('c', 'client').string('l').string('h')["default"]('r', 'rc4')["default"]('c', false)["default"]('p', '123456').describe('l', 'host and port jtunnel listen on').describe('h', 'host and port of the backend host').describe('r', 'encryption method').describe('p', 'encryption cipher key').describe('d', 'dump all encryption method').describe('c', 'client mode').argv;

  if (argv.d) {
    ciphers = Crypto.getCiphers();
    console.log(ciphers.join('  '));
    process.exit(0);
  } else {
    Opt.demand(['l', 'h']).argv;
  }

  listen = 0 <= argv.listen.indexOf(':') ? argv.listen.split(':') : [null, argv.listen];

  host = 0 <= argv.host.indexOf(':') ? argv.host.split(':') : [null, argv.host];

  server = Net.createServer({
    allowHalfOpen: true,
    pauseOnConnect: true
  }, function(s) {
    var cipher, decipher, target;
    console.log("input connect: " + s.remoteAddress + "@" + s.remotePort);
    cipher = Crypto.createCipher(argv.crypto, argv.password);
    decipher = Crypto.createDecipher(argv.crypto, argv.password);
    target = Net.connect(host[1], host[0], function() {
      console.log("output connect: " + target.localAddress + "@" + target.localPort);
      s.pipe(argv.client ? cipher : decipher).pipe(target).pipe(argv.client ? decipher : cipher).pipe(s);
      return s.resume();
    });
    s.on('close', function() {
      return console.log("input close: " + s.remoteAddress + "@" + s.remotePort);
    });
    s.on('error', function(error) {
      console.log("input error: " + error.message);
      if ((s != null) && !s.destroyed) {
        s.destory();
      }
      if ((target != null) && !target.destroyed) {
        return target.destory();
      }
    });
    target.on('close', function() {
      return console.log("ouput close");
    });
    return target.on('error', function(error) {
      console.log("ouput error: " + error.message);
      if ((s != null) && !s.destroyed) {
        s.destory();
      }
      if ((target != null) && !target.destroyed) {
        return target.destory();
      }
    });
  });

  server.on('error', function(error) {
    return console.error(error);
  });

  server.on('listening', function() {
    console.log("listening at " + argv.listen);
    console.log((argv.client ? 'client' : 'server') + ' mode');
    return console.log("using encryption method " + argv.crypto + " with secret " + argv.password);
  });

  server.listen(listen[1], listen[0]);

}).call(this);
